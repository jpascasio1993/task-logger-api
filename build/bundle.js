(()=>{"use strict";var t={180:t=>{t.exports=require("regenerator-runtime/runtime")},680:(t,s,e)=>{const a=require("express");var r=e.n(a);const o=require("cors");var n=e.n(o);const i=require("helmet");var c=e.n(i);const l=require("mongoose");var u=e.n(l);const d=(0,a.Router)();d.get("/tasks",(async(t,s,e)=>{const a=s.locals.context,r=await a.getTasks.execute(t.body);if("success"===r.type)return s.status(200).json(r),void e();s.status(500).json(r),e()})),d.post("/tasks",(async(t,s,e)=>{const a=s.locals.context,r=await a.createTasks.execute(t.body);if("success"===r.type)return s.status(200).json(r),void e();s.status(500).json(r),e()})),d.put("/tasks",(async(t,s,e)=>{const a=s.locals.context,r=await a.updateTask.execute(t.body);if("success"===r.type)return s.status(200).json(r),void e();s.status(500).json(r),e()})),d.delete("/tasks",(async(t,s,e)=>{const a=s.locals.context,r=await a.deleteTask.execute(t.body);if("success"===r.type)return s.status(200).json(r),void e();s.status(500).json(r),e()}));const k=d,y=(0,a.Router)();y.use("/tasks_logger",k);const p=y,T=t=>({data:t,error:null,isSuccess:!0}),m=t=>({error:t,isSuccess:!1}),g=require("lodash");class w{taskCollection;constructor(t){this.taskCollection=t}async deleteTask(t){const s=await this.taskCollection.startSession();try{s.startTransaction();const e=await this.taskCollection.deleteMany({_id:{$in:t.ids}},{session:s});return await s.commitTransaction(),T(e)}catch(t){return console.error(t),await s.abortTransaction(),m(t)}finally{await s.endSession()}}async updateTask(t){const s=await this.taskCollection.startSession();try{s.startTransaction();const e=t.tasks.map((t=>(0,g.omitBy)(t,g.isNil))).map((t=>({updateOne:{filter:{_id:t._id},update:{$set:(0,g.omit)(t,"_id")}}}))),a=await this.taskCollection.bulkWrite(e,{session:s});return await s.commitTransaction(),T(a)}catch(t){return console.error(t),await s.abortTransaction(),m(t)}finally{await s.endSession()}}async createTasks(t){const s=await this.taskCollection.startSession();try{s.startTransaction();const e=t.tasks.map((t=>(0,g.omitBy)(t,g.isNil))),a=await this.taskCollection.create(e,{session:s});return await s.commitTransaction(),T(a)}catch(t){return await s.abortTransaction(),m(t)}finally{await s.endSession()}}async getTasks(t){try{const s=(0,g.omitBy)(t,g.isNil),e=(0,g.reduce)(s,((t,s,e)=>(t[e]=(0,g.isBoolean)(s)||"_id"===e?s:{$regex:s,$options:"i"},t)),{}),a=await this.taskCollection.find(e);return T(a)}catch(t){return m(t)}}}const h=new l.Schema({title:{type:String,required:!0},description:{type:String,required:!0},dateTime:{type:Date,default:Date.now},completed:{type:Boolean,default:!1}},{timestamps:!0}),f=(0,l.model)("Task",h),x=({title:t,message:s,data:e})=>({data:e,type:"success",title:t,message:s}),v=({title:t,message:s,error:e})=>({error:e,type:"error",title:t,message:s}),S={getTasks:new class{taskRepository;constructor(t){this.taskRepository=t}async execute(t){const s=await this.taskRepository.getTasks(t);return s.isSuccess?x({title:"Get Tasks",message:"Tasks fetched successfully",data:s.data}):v({title:"Get Tasks",message:"Failed to retrieve tasks",error:s.error})}}(new w(f)),createTasks:new class{taskRepository;constructor(t){this.taskRepository=t}async execute(t){const s=await this.taskRepository.createTasks(t);return s.isSuccess?x({title:"Create Tasks",message:"Tasks created successfully",data:s.data}):v({title:"Create Tasks",message:"Failed to create tasks",error:s.error})}}(new w(f)),updateTask:new class{taskRepository;constructor(t){this.taskRepository=t}async execute(t){const s=await this.taskRepository.updateTask(t);return s.isSuccess?x({title:"Update Tasks",message:"Tasks updated successfully",data:s.data}):v({title:"Update Tasks",message:"Failed to update tasks",error:s.error})}}(new w(f)),deleteTask:new class{taskRepository;constructor(t){this.taskRepository=t}async execute(t){const s=await this.taskRepository.deleteTask(t);return s.isSuccess?x({title:"Delete Tasks",message:"Tasks deleted successfully",data:s.data}):v({title:"Delete Tasks",message:"Failed to delete tasks",error:s.error})}}(new w(f))},j=r()();j.use(c()()).use(n()({origin:(t,s)=>{s(null,!0)}})).use(r().json()).use(((t,s,e)=>{s.locals.context=S,e()})).use(p),j.get("/",((t,s)=>{s.send("âœ… MongoDB connected successfully!")})),u().connect("mongodb+srv://jpascasio1993dev:4oTpMjAzOs2TrwIg@free-cluster-0.u2pjyxz.mongodb.net/").then((()=>{j.listen(3e3,(()=>{console.log("Server is running on port 3000")})).on("error",(t=>{console.error("[Server] Error starting server: ",t),process.exit(1)}))})).catch((t=>{console.error("[MongoDB] Error connecting to MongoDB: ",t),process.exit(1)}))}},s={};function e(a){var r=s[a];if(void 0!==r)return r.exports;var o=s[a]={exports:{}};return t[a](o,o.exports,e),o.exports}e.n=t=>{var s=t&&t.__esModule?()=>t.default:()=>t;return e.d(s,{a:s}),s},e.d=(t,s)=>{for(var a in s)e.o(s,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:s[a]})},e.o=(t,s)=>Object.prototype.hasOwnProperty.call(t,s),e(180),e(680)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,