(()=>{"use strict";var s={180:s=>{s.exports=require("regenerator-runtime/runtime")},365:(s,t,e)=>{const a=require("express");var r=e.n(a);const o=require("cors");var n=e.n(o);const i=require("helmet");var c=e.n(i);const l=require("mongoose");var u=e.n(l);const d=(0,a.Router)();d.get("/tasks",(async(s,t,e)=>{const a=t.locals.context,r=await a.getTasks.execute(s.body);if("success"===r.type)return t.status(200).json(r),void e();t.status(200).json(r),e()})),d.post("/tasks",(async(s,t,e)=>{const a=t.locals.context,r=await a.createTasks.execute(s.body);if("success"===r.type)return t.status(200).json(r),void e();t.status(200).json(r),e()})),d.put("/tasks",(async(s,t,e)=>{const a=t.locals.context,r=await a.updateTask.execute(s.body);if("success"===r.type)return t.status(200).json(r),void e();t.status(200).json(r),e()})),d.delete("/tasks",(async(s,t,e)=>{const a=t.locals.context,r=await a.deleteTask.execute(s.body);if("success"===r.type)return t.status(200).json(r),void e();t.status(200).json(r),e()}));const k=d,p=(0,a.Router)();p.get("/health",((s,t)=>{t.status(200).json(!0)}));const y=p,g=(0,a.Router)();g.use("/task_logger",k),g.use("/api",y);const m=g,T=s=>({data:s,error:null,isSuccess:!0}),w=s=>({error:s,isSuccess:!1}),h=require("lodash");class f{taskCollection;constructor(s){this.taskCollection=s}async deleteTask(s){const t=await this.taskCollection.startSession();try{t.startTransaction();const e=await this.taskCollection.deleteMany({_id:{$in:s.ids}},{session:t});return await t.commitTransaction(),T(e)}catch(s){return await t.abortTransaction(),w(s)}finally{await t.endSession()}}async updateTask(s){const t=await this.taskCollection.startSession();try{t.startTransaction();const e=s.tasks.map((s=>(0,h.omitBy)(s,h.isNil))).map((s=>({updateOne:{filter:{_id:s._id},update:{$set:(0,h.omit)(s,"_id")}}}))),a=await this.taskCollection.bulkWrite(e,{session:t});return await t.commitTransaction(),T(a)}catch(s){return await t.abortTransaction(),w(s)}finally{await t.endSession()}}async createTasks(s){const t=await this.taskCollection.startSession();try{t.startTransaction();const e=s.tasks.map((s=>(0,h.omitBy)(s,h.isNil))),a=await this.taskCollection.create(e,{session:t});return await t.commitTransaction(),T(a)}catch(s){return await t.abortTransaction(),w(s)}finally{await t.endSession()}}async getTasks(s){try{const t=(0,h.omitBy)(s,h.isNil),e=(0,h.reduce)(t,((s,t,e)=>(s[e]=(0,h.isBoolean)(t)||"_id"===e?t:{$regex:t,$options:"i"},s)),{});console.log(e);const a=await this.taskCollection.find(e);return T(a)}catch(s){return console.error(s),w(s)}}}const x=new l.Schema({title:{type:String,required:!0},description:{type:String,required:!0},dateTime:{type:String,default:(new Date).toISOString()},completed:{type:Boolean,default:!1}},{timestamps:!0}),v=(0,l.model)("Task",x),S=({title:s,message:t,data:e})=>({data:e,type:"success",title:s,message:t}),j=({title:s,message:t,error:e})=>({error:e,type:"error",title:s,message:t}),R={getTasks:new class{taskRepository;constructor(s){this.taskRepository=s}async execute(s){const t=await this.taskRepository.getTasks(s);return t.isSuccess?S({title:"Get Tasks",message:"Tasks fetched successfully",data:t.data}):j({title:"Get Tasks",message:t.error.message||"Failed to retrieve tasks",error:t.error})}}(new f(v)),createTasks:new class{taskRepository;constructor(s){this.taskRepository=s}async execute(s){const t=await this.taskRepository.createTasks(s);return t.isSuccess?S({title:"Create Tasks",message:"Tasks created successfully",data:t.data}):j({title:"Create Tasks",message:t.error.message||"Failed to create tasks",error:t.error})}}(new f(v)),updateTask:new class{taskRepository;constructor(s){this.taskRepository=s}async execute(s){const t=await this.taskRepository.updateTask(s);return t.isSuccess?S({title:"Update Tasks",message:"Tasks updated successfully",data:t.data}):j({title:"Update Tasks",message:t.error.message||"Failed to update tasks",error:t.error})}}(new f(v)),deleteTask:new class{taskRepository;constructor(s){this.taskRepository=s}async execute(s){const t=await this.taskRepository.deleteTask(s);return t.isSuccess?S({title:"Delete Tasks",message:"Tasks deleted successfully",data:t.data}):j({title:"Delete Tasks",message:t.error.message||"Failed to delete tasks",error:t.error})}}(new f(v))},b=r()();b.use(c()()).use(n()({origin:(s,t)=>{t(null,!0)}})).use(r().json()).use(((s,t,e)=>{t.locals.context=R,e()})).use(m),b.get("/",((s,t)=>{t.send("âœ… MongoDB connected successfully!")})),u().connect("mongodb+srv://jpascasio1993dev:4oTpMjAzOs2TrwIg@free-cluster-0.u2pjyxz.mongodb.net/").then((()=>{b.listen(3e3,(()=>{console.log("Server is running on port 3000")})).on("error",(s=>{console.error("[Server] Error starting server: ",s),process.exit(1)}))})).catch((s=>{console.error("[MongoDB] Error connecting to MongoDB: ",s),process.exit(1)}))}},t={};function e(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={exports:{}};return s[a](o,o.exports,e),o.exports}e.n=s=>{var t=s&&s.__esModule?()=>s.default:()=>s;return e.d(t,{a:t}),t},e.d=(s,t)=>{for(var a in t)e.o(t,a)&&!e.o(s,a)&&Object.defineProperty(s,a,{enumerable:!0,get:t[a]})},e.o=(s,t)=>Object.prototype.hasOwnProperty.call(s,t),e(180),e(365)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FDTUEsRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rhc2tfbG9nZ2luZ19zeXN0ZW1fYmFja2VuZC9leHRlcm5hbCBjb21tb25qcyBcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiIiwid2VicGFjazovL3Rhc2tfbG9nZ2luZ19zeXN0ZW1fYmFja2VuZC9leHRlcm5hbCBjb21tb25qcyBcImV4cHJlc3NcIiIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvZXh0ZXJuYWwgY29tbW9uanMgXCJjb3JzXCIiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kL2V4dGVybmFsIGNvbW1vbmpzIFwiaGVsbWV0XCIiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kL2V4dGVybmFsIGNvbW1vbmpzIFwibW9uZ29vc2VcIiIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9yb3V0ZXJzL3Rhc2tfcm91dGVyL3Rhc2tfcm91dGVyLnRzIiwid2VicGFjazovL3Rhc2tfbG9nZ2luZ19zeXN0ZW1fYmFja2VuZC8uL3JvdXRlcnMvYXBpX2hlYWx0aF9yb3V0ZXIvYXBpX2hlYWx0aF9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kLy4vcm91dGVycy9pbmRleC50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9kb21haW4vbW9kZWxzL3Jlc3VsdC50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvZXh0ZXJuYWwgY29tbW9uanMgXCJsb2Rhc2hcIiIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9kYXRhL3JlcG9zaXRvcnkvdGFza19yZXBvc2l0b3J5X2ltcGwudHMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kLy4vZGF0YS9jb2xsZWN0aW9ucy90YXNrX2NvbGxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kLy4vZGF0YS9yZXNwb25zZS9yZXNwb25zZS50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9kYXRhL2NvbnRleHQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kLy4vZG9tYWluL3VzZV9jYXNlcy9nZXRfdGFza3MudHMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kLy4vZG9tYWluL3VzZV9jYXNlcy9jcmVhdGVfdGFza3MudHMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kLy4vZG9tYWluL3VzZV9jYXNlcy91cGRhdGVfdGFzay50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9kb21haW4vdXNlX2Nhc2VzL2RlbGV0ZV90YXNrcy50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9pbmRleC50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvLi9yb3V0ZXJzL21pZGRsZXdhcmUvbWlkZGxld2FyZS50cyIsIndlYnBhY2s6Ly90YXNrX2xvZ2dpbmdfc3lzdGVtX2JhY2tlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3Rhc2tfbG9nZ2luZ19zeXN0ZW1fYmFja2VuZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGFza19sb2dnaW5nX3N5c3RlbV9iYWNrZW5kL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJleHByZXNzXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiY29yc1wiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImhlbG1ldFwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpOyIsImltcG9ydCBHZXRUYXNrUGFyYW1zIGZyb20gJ0AvZGF0YS9wYXJhbXMvZ2V0X3Rhc2tfcGFyYW1zJztcbmltcG9ydCB7IFJvdXRlciwgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IENvbnRleHQgZnJvbSAnQC9kYXRhL2NvbnRleHQnO1xuaW1wb3J0IENyZWF0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy9jcmVhdGVfdGFza19wYXJhbXMnO1xuaW1wb3J0IFVwZGF0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy91cGRhdGVfdGFza19wYXJhbXMnO1xuaW1wb3J0IERlbGV0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy9kZWxldGVfdGFza19wYXJhbXMnO1xuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cbnJvdXRlci5nZXQoJy90YXNrcycsIGFzeW5jIChyZXE6IFJlcXVlc3Q8R2V0VGFza1BhcmFtcywgYW55LCBhbnksIGFueT4sIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQ6IHR5cGVvZiBDb250ZXh0ID0gcmVzLmxvY2Fscy5jb250ZXh0O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udGV4dC5nZXRUYXNrcy5leGVjdXRlKHJlcS5ib2R5KTtcbiAgICBpZiAocmVzcG9uc2UudHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcbiAgICBuZXh0KCk7XG59KTtcblxucm91dGVyLnBvc3QoJy90YXNrcycsIGFzeW5jIChyZXE6IFJlcXVlc3Q8Q3JlYXRlVGFza1BhcmFtcywgYW55LCBhbnksIGFueT4sIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQ6IHR5cGVvZiBDb250ZXh0ID0gcmVzLmxvY2Fscy5jb250ZXh0O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udGV4dC5jcmVhdGVUYXNrcy5leGVjdXRlKHJlcS5ib2R5KTtcbiAgICBpZiAocmVzcG9uc2UudHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcbiAgICBuZXh0KCk7XG59KTtcblxucm91dGVyLnB1dCgnL3Rhc2tzJywgYXN5bmMgKHJlcTogUmVxdWVzdDxVcGRhdGVUYXNrUGFyYW1zLCBhbnksIGFueSwgYW55PiwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgY29uc3QgY29udGV4dDogdHlwZW9mIENvbnRleHQgPSByZXMubG9jYWxzLmNvbnRleHQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb250ZXh0LnVwZGF0ZVRhc2suZXhlY3V0ZShyZXEuYm9keSk7XG4gICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdzdWNjZXNzJykge1xuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXNwb25zZSk7XG4gICAgICAgIG5leHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXNwb25zZSk7XG4gICAgbmV4dCgpO1xufSk7XG5cbnJvdXRlci5kZWxldGUoJy90YXNrcycsIGFzeW5jIChyZXE6IFJlcXVlc3Q8RGVsZXRlVGFza1BhcmFtcywgYW55LCBhbnksIGFueT4sIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQ6IHR5cGVvZiBDb250ZXh0ID0gcmVzLmxvY2Fscy5jb250ZXh0O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udGV4dC5kZWxldGVUYXNrLmV4ZWN1dGUocmVxLmJvZHkpO1xuICAgIGlmIChyZXNwb25zZS50eXBlID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzcG9uc2UpO1xuICAgICAgICBuZXh0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzcG9uc2UpO1xuICAgIG5leHQoKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIiwiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcImV4cHJlc3NcIjtcblxuY29uc3Qgcm91dGVyICA9IFJvdXRlcigpO1xuXG5yb3V0ZXIuZ2V0KCcvaGVhbHRoJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24odHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyIsImltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHRhc2tSb3V0ZXIgZnJvbSAnQC9yb3V0ZXJzL3Rhc2tfcm91dGVyL3Rhc2tfcm91dGVyJztcbmltcG9ydCBhcGlIZWFsdGhSb3V0ZXIgZnJvbSAnQC9yb3V0ZXJzL2FwaV9oZWFsdGhfcm91dGVyL2FwaV9oZWFsdGhfcm91dGVyJztcbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG5yb3V0ZXIudXNlKCcvdGFza19sb2dnZXInLCB0YXNrUm91dGVyKTtcbnJvdXRlci51c2UoJy9hcGknLCBhcGlIZWFsdGhSb3V0ZXIpO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XG4iLCJleHBvcnQgdHlwZSBSZXN1bHQ8VD4gPSB7XG4gIGRhdGE/OiBUO1xuICBlcnJvcjogYW55IHwgbnVsbDtcbiAgaXNTdWNjZXNzOiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IFJlc3VsdFN1Y2Nlc3MgPSA8VD4oZGF0YTogVCk6IFJlc3VsdDxUPiA9PiAoe1xuICBkYXRhLFxuICBlcnJvcjogbnVsbCxcbiAgaXNTdWNjZXNzOiB0cnVlLFxufSk7XG5cbmV4cG9ydCBjb25zdCBSZXN1bHRFcnJvciA9IDxUPihlcnJvcjogYW55KTogUmVzdWx0PFQ+ID0+ICh7XG4gIGVycm9yLFxuICBpc1N1Y2Nlc3M6IGZhbHNlLFxufSk7XG4iLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImxvZGFzaFwiKTsiLCJpbXBvcnQgeyBSZXN1bHQsIFJlc3VsdFN1Y2Nlc3MsIFJlc3VsdEVycm9yIH0gZnJvbSAnQC9kb21haW4vbW9kZWxzL3Jlc3VsdCc7XG5pbXBvcnQgVGFzayBmcm9tICdAL2RvbWFpbi9tb2RlbHMvdGFzayc7XG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCB7IEJ1bGtXcml0ZVJlc3VsdCwgRGVsZXRlUmVzdWx0IH0gZnJvbSAnbW9uZ29kYic7XG5pbXBvcnQgVGFza1JlcG9zaXRvcnkgZnJvbSAnQC9kb21haW4vcmVwb3NpdG9yaWVzL3Rhc2tfcmVwb3NpdG9yeSc7XG5pbXBvcnQgR2V0VGFza1BhcmFtcyBmcm9tICdAL2RhdGEvcGFyYW1zL2dldF90YXNrX3BhcmFtcyc7XG5pbXBvcnQgeyBpc0Jvb2xlYW4sIGlzTmlsLCBvbWl0LCBvbWl0QnksIHBpY2ssIHJlZHVjZX0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IENyZWF0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy9jcmVhdGVfdGFza19wYXJhbXMnO1xuaW1wb3J0IFVwZGF0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy91cGRhdGVfdGFza19wYXJhbXMnO1xuaW1wb3J0IERlbGV0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy9kZWxldGVfdGFza19wYXJhbXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrUmVwb3NpdG9yeUltcGwgaW1wbGVtZW50cyBUYXNrUmVwb3NpdG9yeSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGFza0NvbGxlY3Rpb246IE1vZGVsPFRhc2s+O1xuXG4gIGNvbnN0cnVjdG9yKHRhc2tDb2xsZWN0aW9uOiBNb2RlbDxUYXNrPikge1xuICAgIHRoaXMudGFza0NvbGxlY3Rpb24gPSB0YXNrQ29sbGVjdGlvbjtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVRhc2socGFyYW1zOiBEZWxldGVUYXNrUGFyYW1zKTogUHJvbWlzZTxSZXN1bHQ8RGVsZXRlUmVzdWx0Pj4ge1xuICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgdGhpcy50YXNrQ29sbGVjdGlvbi5zdGFydFNlc3Npb24oKTtcblxuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uLnN0YXJ0VHJhbnNhY3Rpb24oKTtcbiAgICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgdGhpcy50YXNrQ29sbGVjdGlvbi5kZWxldGVNYW55KHtfaWQ6IHskaW46IHBhcmFtcy5pZHN9fSwge3Nlc3Npb259KTtcbiAgICAgIGF3YWl0IHNlc3Npb24uY29tbWl0VHJhbnNhY3Rpb24oKTtcbiAgICAgIHJldHVybiBSZXN1bHRTdWNjZXNzKHRhc2tzKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGF3YWl0IHNlc3Npb24uYWJvcnRUcmFuc2FjdGlvbigpO1xuICAgICAgcmV0dXJuIFJlc3VsdEVycm9yKGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBzZXNzaW9uLmVuZFNlc3Npb24oKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGVUYXNrKHBhcmFtczogVXBkYXRlVGFza1BhcmFtcyk6IFByb21pc2U8UmVzdWx0PEJ1bGtXcml0ZVJlc3VsdD4+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgdGhpcy50YXNrQ29sbGVjdGlvbi5zdGFydFNlc3Npb24oKTtcblxuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uLnN0YXJ0VHJhbnNhY3Rpb24oKTtcbiAgICAgIGNvbnN0IGNsZWFuVGFza3NQYXJhbXMgPSBwYXJhbXMudGFza3MubWFwKCh0YXNrKSA9PiBvbWl0QnkodGFzaywgaXNOaWwpKTtcbiAgICAgIGNvbnN0IGZvcm1hdFBhcmFtcyA9IGNsZWFuVGFza3NQYXJhbXMubWFwKCh0YXNrKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdXBkYXRlT25lOiB7XG4gICAgICAgICAgICBmaWx0ZXI6IHsgX2lkOiB0YXNrLl9pZCB9LFxuICAgICAgICAgICAgdXBkYXRlOiB7XG4gICAgICAgICAgICAgICRzZXQ6IG9taXQodGFzaywgJ19pZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICBcbiAgICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgdGhpcy50YXNrQ29sbGVjdGlvbi5idWxrV3JpdGUoZm9ybWF0UGFyYW1zLCB7IHNlc3Npb24gfSk7XG4gICAgICBhd2FpdCBzZXNzaW9uLmNvbW1pdFRyYW5zYWN0aW9uKCk7XG4gICAgICByZXR1cm4gUmVzdWx0U3VjY2Vzcyh0YXNrcyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBhd2FpdCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKTtcbiAgICAgIHJldHVybiBSZXN1bHRFcnJvcihlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYXdhaXQgc2Vzc2lvbi5lbmRTZXNzaW9uKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlVGFza3MocGFyYW1zOiBDcmVhdGVUYXNrUGFyYW1zKTogUHJvbWlzZTxSZXN1bHQ8VGFza1tdPj4ge1xuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCB0aGlzLnRhc2tDb2xsZWN0aW9uLnN0YXJ0U2Vzc2lvbigpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb24uc3RhcnRUcmFuc2FjdGlvbigpO1xuICAgICAgY29uc3QgY2xlYW5UYXNrc1BhcmFtcyA9IHBhcmFtcy50YXNrcy5tYXAoKHRhc2spID0+IG9taXRCeSh0YXNrLCBpc05pbCkpO1xuICAgICAgY29uc3QgdGFza3MgPSBhd2FpdCB0aGlzLnRhc2tDb2xsZWN0aW9uLmNyZWF0ZShjbGVhblRhc2tzUGFyYW1zLCB7IHNlc3Npb24gfSk7XG4gICAgICBhd2FpdCBzZXNzaW9uLmNvbW1pdFRyYW5zYWN0aW9uKCk7XG4gICAgICByZXR1cm4gUmVzdWx0U3VjY2Vzcyh0YXNrcyk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBhd2FpdCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKTtcbiAgICAgIHJldHVybiBSZXN1bHRFcnJvcihlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYXdhaXQgc2Vzc2lvbi5lbmRTZXNzaW9uKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0VGFza3MocGFyYW1zOiBHZXRUYXNrUGFyYW1zKTogUHJvbWlzZTxSZXN1bHQ8QXJyYXk8VGFzaz4+PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNsZWFuVGFza1BhcmFtcyA9IG9taXRCeShwYXJhbXMsIGlzTmlsKTtcbiAgICAgIGNvbnN0IGZvcm1hdFBhcmFtcyA9IHJlZHVjZShjbGVhblRhc2tQYXJhbXMsIChhY2M6IGFueSwgY3VycjogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBhY2Nba2V5XSA9IGlzQm9vbGVhbihjdXJyKSAgfHwga2V5ID09PSAnX2lkJz8gY3VyciA6IHsgJHJlZ2V4OiBjdXJyLCAkb3B0aW9uczogJ2knIH07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgICBjb25zb2xlLmxvZyhmb3JtYXRQYXJhbXMpO1xuICAgICAgY29uc3QgdGFza3MgPSBhd2FpdCB0aGlzLnRhc2tDb2xsZWN0aW9uLmZpbmQoZm9ybWF0UGFyYW1zKTtcbiAgICAgIHJldHVybiBSZXN1bHRTdWNjZXNzKHRhc2tzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgcmV0dXJuIFJlc3VsdEVycm9yKGUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFRhc2sgZnJvbSAnQC9kb21haW4vbW9kZWxzL3Rhc2snO1xuaW1wb3J0IHsgU2NoZW1hLCBtb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcbmNvbnN0IFRhc2tTY2hlbWEgPSBuZXcgU2NoZW1hPFRhc2s+KFxuICB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgZGVzY3JpcHRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgZGF0ZVRpbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9LFxuICAgIGNvbXBsZXRlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0aW1lc3RhbXBzOiB0cnVlLFxuICB9LFxuKTtcblxuY29uc3QgVGFza0NvbGxlY3Rpb24gPSBtb2RlbDxUYXNrPignVGFzaycsIFRhc2tTY2hlbWEpO1xuXG5leHBvcnQgZGVmYXVsdCBUYXNrQ29sbGVjdGlvbjtcbiIsIiBleHBvcnQgdHlwZSBSZXNwb25zZTxUPiA9IHtcbiAgICB0aXRsZT86IHN0cmluZztcbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuICAgIHR5cGU6ICdzdWNjZXNzJyB8ICdlcnJvcic7XG4gICAgZGF0YT86IFQ7XG4gICAgZXJyb3I/OiBFcnJvcjtcbn1cblxuXG5leHBvcnQgY29uc3QgUmVzcG9uc2VTdWNjZXNzID0gPFQ+KHt0aXRsZSwgbWVzc2FnZSwgZGF0YX06e3RpdGxlPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nLCBkYXRhPzogVH0pOiBSZXNwb25zZTxUPiA9PiAoe1xuICAgIGRhdGE6IGRhdGEsXG4gICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgIHRpdGxlOiB0aXRsZSxcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxufSk7XG5cbmV4cG9ydCBjb25zdCBSZXNwb25zZUVycm9yID0gPFQ+KHt0aXRsZSwgbWVzc2FnZSwgZXJyb3J9Ont0aXRsZT86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZywgZXJyb3I6IEVycm9yfSk6IFJlc3BvbnNlPFQ+ID0+ICh7XG4gICAgZXJyb3I6IGVycm9yLFxuICAgIHR5cGU6ICdlcnJvcicsXG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG59KTsiLCJpbXBvcnQgVGFza1JlcG9zaXRvcnkgZnJvbSAnQC9kYXRhL3JlcG9zaXRvcnkvdGFza19yZXBvc2l0b3J5X2ltcGwnO1xuaW1wb3J0IFRhc2tDb2xsZWN0aW9uIGZyb20gJ0AvZGF0YS9jb2xsZWN0aW9ucy90YXNrX2NvbGxlY3Rpb24nO1xuaW1wb3J0IFRhc2sgZnJvbSAnQC9kb21haW4vbW9kZWxzL3Rhc2snO1xuaW1wb3J0IFVzZUNhc2UgZnJvbSAnQC9kb21haW4vdXNlX2Nhc2VzL3VzZV9jYXNlJztcbmltcG9ydCBHZXRUYXNrUGFyYW1zIGZyb20gJ0AvZGF0YS9wYXJhbXMvZ2V0X3Rhc2tfcGFyYW1zJztcbmltcG9ydCBHZXRUYXNrIGZyb20gJ0AvZG9tYWluL3VzZV9jYXNlcy9nZXRfdGFza3MnO1xuaW1wb3J0IENyZWF0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy9jcmVhdGVfdGFza19wYXJhbXMnO1xuaW1wb3J0IENyZWF0ZVRhc2tzIGZyb20gJ0AvZG9tYWluL3VzZV9jYXNlcy9jcmVhdGVfdGFza3MnO1xuaW1wb3J0IFVwZGF0ZVRhc2tQYXJhbXMgZnJvbSAnQC9kYXRhL3BhcmFtcy91cGRhdGVfdGFza19wYXJhbXMnO1xuaW1wb3J0IHsgQnVsa1dyaXRlUmVzdWx0LCBEZWxldGVSZXN1bHQgfSBmcm9tICdtb25nb2RiJztcbmltcG9ydCBVcGRhdGVUYXNrIGZyb20gJ0AvZG9tYWluL3VzZV9jYXNlcy91cGRhdGVfdGFzayc7XG5pbXBvcnQgRGVsZXRlVGFza1BhcmFtcyBmcm9tICdAL2RhdGEvcGFyYW1zL2RlbGV0ZV90YXNrX3BhcmFtcyc7XG5pbXBvcnQgRGVsZXRlVGFza3MgZnJvbSAnQC9kb21haW4vdXNlX2Nhc2VzL2RlbGV0ZV90YXNrcyc7XG5cbmludGVyZmFjZSBDb250ZXh0IHtcbiAgZ2V0VGFza3M6IFVzZUNhc2U8R2V0VGFza1BhcmFtcywgVGFza1tdPjtcbiAgY3JlYXRlVGFza3M6IFVzZUNhc2U8Q3JlYXRlVGFza1BhcmFtcywgVGFza1tdPjtcbiAgdXBkYXRlVGFzazogVXNlQ2FzZTxVcGRhdGVUYXNrUGFyYW1zLCBCdWxrV3JpdGVSZXN1bHQ+O1xuICBkZWxldGVUYXNrOiBVc2VDYXNlPERlbGV0ZVRhc2tQYXJhbXMsIERlbGV0ZVJlc3VsdD47XG59XG5cbmNvbnN0IGNvbnRleHQ6IENvbnRleHQgPSB7XG4gIGdldFRhc2tzOiBuZXcgR2V0VGFzayhuZXcgVGFza1JlcG9zaXRvcnkoVGFza0NvbGxlY3Rpb24pKSxcbiAgY3JlYXRlVGFza3M6IG5ldyBDcmVhdGVUYXNrcyhuZXcgVGFza1JlcG9zaXRvcnkoVGFza0NvbGxlY3Rpb24pKSxcbiAgdXBkYXRlVGFzazogbmV3IFVwZGF0ZVRhc2sobmV3IFRhc2tSZXBvc2l0b3J5KFRhc2tDb2xsZWN0aW9uKSksXG4gIGRlbGV0ZVRhc2s6IG5ldyBEZWxldGVUYXNrcyhuZXcgVGFza1JlcG9zaXRvcnkoVGFza0NvbGxlY3Rpb24pKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRleHQ7XG4iLCJpbXBvcnQgVGFza1JlcG9zaXRvcnkgZnJvbSBcIkAvZGF0YS9yZXBvc2l0b3J5L3Rhc2tfcmVwb3NpdG9yeV9pbXBsXCI7XG5pbXBvcnQgVXNlQ2FzZSBmcm9tIFwiQC9kb21haW4vdXNlX2Nhc2VzL3VzZV9jYXNlXCI7XG5pbXBvcnQgR2V0VGFza1BhcmFtcyBmcm9tIFwiQC9kYXRhL3BhcmFtcy9nZXRfdGFza19wYXJhbXNcIjtcbmltcG9ydCB7UmVzcG9uc2VTdWNjZXNzLCBSZXNwb25zZUVycm9yLCBSZXNwb25zZX0gZnJvbSBcIkAvZGF0YS9yZXNwb25zZS9yZXNwb25zZVwiO1xuaW1wb3J0IFRhc2sgZnJvbSBcIkAvZG9tYWluL21vZGVscy90YXNrXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdldFRhc2sgaW1wbGVtZW50cyBVc2VDYXNlPEdldFRhc2tQYXJhbXMsIFRhc2tbXT4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGFza1JlcG9zaXRvcnk6IFRhc2tSZXBvc2l0b3J5O1xuICAgIGNvbnN0cnVjdG9yKHRhc2tSZXBvc2l0b3J5OiBUYXNrUmVwb3NpdG9yeSkge1xuICAgICAgICB0aGlzLnRhc2tSZXBvc2l0b3J5ID0gdGFza1JlcG9zaXRvcnk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUocGFyYW1zOiBHZXRUYXNrUGFyYW1zKTogUHJvbWlzZTxSZXNwb25zZTxUYXNrW10+PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnRhc2tSZXBvc2l0b3J5LmdldFRhc2tzKHBhcmFtcyk7XG4gICAgICBpZighcmVzLmlzU3VjY2Vzcykge1xuICAgICAgICByZXR1cm4gUmVzcG9uc2VFcnJvcih7dGl0bGU6ICdHZXQgVGFza3MnLCBtZXNzYWdlOiByZXMuZXJyb3JbJ21lc3NhZ2UnXSB8fCAnRmFpbGVkIHRvIHJldHJpZXZlIHRhc2tzJywgZXJyb3I6IHJlcy5lcnJvciF9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZXNwb25zZVN1Y2Nlc3Moe1xuICAgICAgICB0aXRsZTogJ0dldCBUYXNrcycsXG4gICAgICAgIG1lc3NhZ2U6ICdUYXNrcyBmZXRjaGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGRhdGE6IHJlcy5kYXRhIVxuICAgICAgfSk7XG4gICAgfVxufVxuICAgICIsImltcG9ydCBDcmVhdGVUYXNrUGFyYW1zIGZyb20gXCJAL2RhdGEvcGFyYW1zL2NyZWF0ZV90YXNrX3BhcmFtc1wiO1xuaW1wb3J0IFVzZUNhc2UgZnJvbSBcIkAvZG9tYWluL3VzZV9jYXNlcy91c2VfY2FzZVwiO1xuaW1wb3J0IFRhc2tSZXBvc2l0b3J5IGZyb20gXCJAL2RvbWFpbi9yZXBvc2l0b3JpZXMvdGFza19yZXBvc2l0b3J5XCI7XG5pbXBvcnQgVGFzayBmcm9tIFwiQC9kb21haW4vbW9kZWxzL3Rhc2tcIjtcbmltcG9ydCB7IFJlc3BvbnNlRXJyb3IsIFJlc3BvbnNlU3VjY2VzcywgUmVzcG9uc2UgfSBmcm9tIFwiQC9kYXRhL3Jlc3BvbnNlL3Jlc3BvbnNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWF0ZVRhc2tzIGltcGxlbWVudHMgVXNlQ2FzZTxDcmVhdGVUYXNrUGFyYW1zLCBUYXNrW10+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRhc2tSZXBvc2l0b3J5OiBUYXNrUmVwb3NpdG9yeTtcbiAgICBjb25zdHJ1Y3Rvcih0YXNrUmVwb3NpdG9yeTogVGFza1JlcG9zaXRvcnkpIHtcbiAgICAgICAgdGhpcy50YXNrUmVwb3NpdG9yeSA9IHRhc2tSZXBvc2l0b3J5O1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGFyYW1zOiBDcmVhdGVUYXNrUGFyYW1zKTogUHJvbWlzZTxSZXNwb25zZTxUYXNrW10+PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMudGFza1JlcG9zaXRvcnkuY3JlYXRlVGFza3MocGFyYW1zKTtcbiAgICAgICAgaWYgKCFyZXMuaXNTdWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VFcnJvcih7IHRpdGxlOiAnQ3JlYXRlIFRhc2tzJywgbWVzc2FnZTogcmVzLmVycm9yWydtZXNzYWdlJ10gfHwgJ0ZhaWxlZCB0byBjcmVhdGUgdGFza3MnLCBlcnJvcjogcmVzLmVycm9yISB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVzcG9uc2VTdWNjZXNzKHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXRlIFRhc2tzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUYXNrcyBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICBkYXRhOiByZXMuZGF0YSFcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCBVc2VDYXNlIGZyb20gXCJAL2RvbWFpbi91c2VfY2FzZXMvdXNlX2Nhc2VcIjtcbmltcG9ydCBUYXNrUmVwb3NpdG9yeSBmcm9tIFwiQC9kb21haW4vcmVwb3NpdG9yaWVzL3Rhc2tfcmVwb3NpdG9yeVwiO1xuaW1wb3J0IHsgUmVzcG9uc2VFcnJvciwgUmVzcG9uc2VTdWNjZXNzLCBSZXNwb25zZSB9IGZyb20gXCJAL2RhdGEvcmVzcG9uc2UvcmVzcG9uc2VcIjtcbmltcG9ydCBVcGRhdGVUYXNrUGFyYW1zIGZyb20gXCJAL2RhdGEvcGFyYW1zL3VwZGF0ZV90YXNrX3BhcmFtc1wiO1xuaW1wb3J0IHsgQnVsa1dyaXRlUmVzdWx0IH0gZnJvbSBcIm1vbmdvZGJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXBkYXRlVGFzayBpbXBsZW1lbnRzIFVzZUNhc2U8VXBkYXRlVGFza1BhcmFtcywgQnVsa1dyaXRlUmVzdWx0PiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0YXNrUmVwb3NpdG9yeTogVGFza1JlcG9zaXRvcnk7XG4gICAgY29uc3RydWN0b3IodGFza1JlcG9zaXRvcnk6IFRhc2tSZXBvc2l0b3J5KSB7XG4gICAgICAgIHRoaXMudGFza1JlcG9zaXRvcnkgPSB0YXNrUmVwb3NpdG9yeTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKHBhcmFtczogVXBkYXRlVGFza1BhcmFtcyk6IFByb21pc2U8UmVzcG9uc2U8QnVsa1dyaXRlUmVzdWx0Pj4ge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnRhc2tSZXBvc2l0b3J5LnVwZGF0ZVRhc2socGFyYW1zKTtcbiAgICAgICAgaWYgKCFyZXMuaXNTdWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VFcnJvcih7IHRpdGxlOiAnVXBkYXRlIFRhc2tzJywgbWVzc2FnZTogcmVzLmVycm9yWydtZXNzYWdlJ10gfHwgJ0ZhaWxlZCB0byB1cGRhdGUgdGFza3MnLCBlcnJvcjogcmVzLmVycm9yISB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVzcG9uc2VTdWNjZXNzKHtcbiAgICAgICAgICAgIHRpdGxlOiAnVXBkYXRlIFRhc2tzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUYXNrcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICBkYXRhOiByZXMuZGF0YSFcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCBEZWxldGVUYXNrUGFyYW1zIGZyb20gXCJAL2RhdGEvcGFyYW1zL2RlbGV0ZV90YXNrX3BhcmFtc1wiO1xuaW1wb3J0IHsgRGVsZXRlUmVzdWx0IH0gZnJvbSBcIm1vbmdvZGJcIjtcbmltcG9ydCBVc2VDYXNlIGZyb20gXCJAL2RvbWFpbi91c2VfY2FzZXMvdXNlX2Nhc2VcIjtcbmltcG9ydCBUYXNrUmVwb3NpdG9yeSBmcm9tIFwiQC9kb21haW4vcmVwb3NpdG9yaWVzL3Rhc2tfcmVwb3NpdG9yeVwiO1xuaW1wb3J0IHsgUmVzcG9uc2VTdWNjZXNzLCBSZXNwb25zZSwgUmVzcG9uc2VFcnJvciB9IGZyb20gXCJAL2RhdGEvcmVzcG9uc2UvcmVzcG9uc2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVsZXRlVGFza3MgaW1wbGVtZW50cyBVc2VDYXNlPERlbGV0ZVRhc2tQYXJhbXMsIERlbGV0ZVJlc3VsdD4ge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB0YXNrUmVwb3NpdG9yeTogVGFza1JlcG9zaXRvcnk7XG5cbiAgICBjb25zdHJ1Y3Rvcih0YXNrUmVwb3NpdG9yeTogVGFza1JlcG9zaXRvcnkpIHtcbiAgICAgICAgdGhpcy50YXNrUmVwb3NpdG9yeSA9IHRhc2tSZXBvc2l0b3J5O1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGFyYW1zOiBEZWxldGVUYXNrUGFyYW1zKTogUHJvbWlzZTxSZXNwb25zZTxEZWxldGVSZXN1bHQ+PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMudGFza1JlcG9zaXRvcnkuZGVsZXRlVGFzayhwYXJhbXMpO1xuICAgICAgICBpZiAoIXJlcy5pc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZUVycm9yKHsgdGl0bGU6ICdEZWxldGUgVGFza3MnLCBtZXNzYWdlOiByZXMuZXJyb3JbJ21lc3NhZ2UnXSB8fCAnRmFpbGVkIHRvIGRlbGV0ZSB0YXNrcycsIGVycm9yOiByZXMuZXJyb3IhIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZXNwb25zZVN1Y2Nlc3Moe1xuICAgICAgICAgICAgdGl0bGU6ICdEZWxldGUgVGFza3MnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1Rhc2tzIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgICAgIGRhdGE6IHJlcy5kYXRhIVxuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IGV4cHJlc3MsIHsgUmVxdWVzdEhhbmRsZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGhlbG1ldCBmcm9tICdoZWxtZXQnO1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXJzJztcbmltcG9ydCB7IGluamVjdCB9IGZyb20gJy4vcm91dGVycy9taWRkbGV3YXJlL21pZGRsZXdhcmUnO1xuXG5jb25zdCBzZXJ2ZXIgPSBleHByZXNzKCk7XG5cbnNlcnZlclxuICAudXNlKGhlbG1ldCgpKVxuICAudXNlKFxuICAgIGNvcnMoe1xuICAgICAgb3JpZ2luOiAocmVxdWVzdE9yaWdpbiwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8IF9pbmNsdWRlcyhhbGxvd2VkT3JpZ2lucywgcmVxdWVzdE9yaWdpbikpIHtcbiAgICAgICAgLy8gICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGNhbGxiYWNrKG5ldyBFcnJvcignTm90IGFsbG93ZWQgYnkgQ09SUycpKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0sXG4gICAgfSksXG4gIClcbiAgLnVzZShleHByZXNzLmpzb24oKSlcbiAgLnVzZShpbmplY3QgYXMgUmVxdWVzdEhhbmRsZXIpXG4gIC51c2Uocm91dGVyKTtcblxuc2VydmVyLmdldCgnLycsIChfcmVxLCByZXMpID0+IHtcbiAgcmVzLnNlbmQoJ+KchSBNb25nb0RCIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHkhJyk7XG59KTtcblxubW9uZ29vc2VcbiAgLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR09fVVJJISlcbiAgLnRoZW4oKCkgPT4ge1xuICAgIHNlcnZlclxuICAgICAgLmxpc3RlbigzMDAwLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTZXJ2ZXIgaXMgcnVubmluZyBvbiBwb3J0IDMwMDAnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ2Vycm9yJywgKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1NlcnZlcl0gRXJyb3Igc3RhcnRpbmcgc2VydmVyOiAnLCBlcnIpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICB9KTtcbiAgfSlcbiAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcignW01vbmdvREJdIEVycm9yIGNvbm5lY3RpbmcgdG8gTW9uZ29EQjogJywgZXJyKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH0pO1xuIiwiaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvbnRleHQgZnJvbSAnQC9kYXRhL2NvbnRleHQnO1xuXG5leHBvcnQgY29uc3QgaW5qZWN0ID0gKFxuICByZXE6IFJlcXVlc3Q8YW55LCBhbnksIGFueSwgYW55PixcbiAgcmVzOiBSZXNwb25zZSxcbiAgbmV4dDogTmV4dEZ1bmN0aW9uLFxuKSA9PiB7XG4gIHJlcy5sb2NhbHMuY29udGV4dCA9IGNvbnRleHQ7XG4gIG5leHQoKTtcbn07XG5cbi8vIGV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXI6IEVycm9yUmVxdWVzdEhhbmRsZXIgPSAoZXJyOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbi8vICAgICBjb25zb2xlLmVycm9yKGVycik7XG4vLyAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyB9KTtcbi8vIH1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbmplY3QsXG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgdXNlZCAnbW9kdWxlJyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE4MCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzY1KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsInJvdXRlciIsIlJvdXRlciIsImdldCIsImFzeW5jIiwicmVxIiwicmVzIiwibmV4dCIsImNvbnRleHQiLCJsb2NhbHMiLCJyZXNwb25zZSIsImdldFRhc2tzIiwiZXhlY3V0ZSIsImJvZHkiLCJ0eXBlIiwic3RhdHVzIiwianNvbiIsInBvc3QiLCJjcmVhdGVUYXNrcyIsInB1dCIsInVwZGF0ZVRhc2siLCJkZWxldGUiLCJkZWxldGVUYXNrIiwidXNlIiwiUmVzdWx0U3VjY2VzcyIsImRhdGEiLCJlcnJvciIsImlzU3VjY2VzcyIsIlJlc3VsdEVycm9yIiwiVGFza1JlcG9zaXRvcnlJbXBsIiwidGFza0NvbGxlY3Rpb24iLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJwYXJhbXMiLCJzZXNzaW9uIiwic3RhcnRTZXNzaW9uIiwic3RhcnRUcmFuc2FjdGlvbiIsInRhc2tzIiwiZGVsZXRlTWFueSIsIl9pZCIsIiRpbiIsImlkcyIsImNvbW1pdFRyYW5zYWN0aW9uIiwiZSIsImFib3J0VHJhbnNhY3Rpb24iLCJlbmRTZXNzaW9uIiwiZm9ybWF0UGFyYW1zIiwibWFwIiwidGFzayIsIm9taXRCeSIsImlzTmlsIiwidXBkYXRlT25lIiwiZmlsdGVyIiwidXBkYXRlIiwiJHNldCIsIm9taXQiLCJidWxrV3JpdGUiLCJjbGVhblRhc2tzUGFyYW1zIiwiY3JlYXRlIiwiY2xlYW5UYXNrUGFyYW1zIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsImtleSIsImlzQm9vbGVhbiIsIiRyZWdleCIsIiRvcHRpb25zIiwiY29uc29sZSIsImxvZyIsImZpbmQiLCJUYXNrU2NoZW1hIiwiU2NoZW1hIiwidGl0bGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImRlc2NyaXB0aW9uIiwiZGF0ZVRpbWUiLCJkZWZhdWx0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY29tcGxldGVkIiwiQm9vbGVhbiIsInRpbWVzdGFtcHMiLCJtb2RlbCIsIlJlc3BvbnNlU3VjY2VzcyIsIm1lc3NhZ2UiLCJSZXNwb25zZUVycm9yIiwidGFza1JlcG9zaXRvcnkiLCJzZXJ2ZXIiLCJvcmlnaW4iLCJyZXF1ZXN0T3JpZ2luIiwiY2FsbGJhY2siLCJfcmVxIiwic2VuZCIsInRoZW4iLCJsaXN0ZW4iLCJvbiIsImVyciIsInByb2Nlc3MiLCJleGl0IiwiY2F0Y2giLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=